<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Comp90077 on Aqua Mega</title>
    <link>http://localhost:1313/aquamega/tags/comp90077/</link>
    <description>Recent content in Comp90077 on Aqua Mega</description>
    <image>
      <title>Aqua Mega</title>
      <url>https://github.com/shyu216.png</url>
      <link>https://github.com/shyu216.png</link>
    </image>
    <generator>Hugo -- 0.125.4</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2024 11:13:45 +1000</lastBuildDate>
    <atom:link href="http://localhost:1313/aquamega/tags/comp90077/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Array</title>
      <link>http://localhost:1313/aquamega/posts/datatype/array/</link>
      <pubDate>Thu, 02 May 2024 11:13:45 +1000</pubDate>
      <guid>http://localhost:1313/aquamega/posts/datatype/array/</guid>
      <description>Insertion: O(1) expected, O(n) worst case Search: O(n) expected, O(n) worst case Deletion: O(n) expected, O(n) worst case class DynamicArray: def __init__(self): self.n = 0 # Number of elements self.capacity = 1 # Initial capacity self.A = self._make_array(self.capacity) def __len__(self): return self.n def __getitem__(self, k): if not 0 &amp;lt;= k &amp;lt; self.n: raise IndexError(&amp;#39;invalid index&amp;#39;) return self.A[k] def insert(self, element): &amp;#34;&amp;#34;&amp;#34; element = (id,key) &amp;#34;&amp;#34;&amp;#34; if self.n == self.capacity: self.</description>
    </item>
    <item>
      <title>Treap</title>
      <link>http://localhost:1313/aquamega/posts/datatype/treap/</link>
      <pubDate>Thu, 02 May 2024 11:13:45 +1000</pubDate>
      <guid>http://localhost:1313/aquamega/posts/datatype/treap/</guid>
      <description>Tree + Heap = Treap Insertion: O(log n) expected, O(n) worst case Search: O(log n) expected, O(n) worst case Deletion: O(log n) expected, O(n) worst case import random class Node: def __init__(self, id, key, priority): self.id = id self.key = key self.priority = priority self.left = None self.right = None class Treap: def __init__(self): self.root = None def _left_rotate(self, node): right_child = node.right node.right = right_child.left right_child.left = node return right_child def _right_rotate(self, node): left_child = node.</description>
    </item>
    <item>
      <title>Comp90077</title>
      <link>http://localhost:1313/aquamega/course/comp90077/</link>
      <pubDate>Fri, 26 Apr 2024 14:55:58 +1000</pubDate>
      <guid>http://localhost:1313/aquamega/course/comp90077/</guid>
      <description>Advanced Algorithms and Data Structures Learn some advanced algorithms and data structures.
Treap
Admortized Analysis: Prepaid/Potential
Quake Heap
Splay Tree
Perfect Hashing/Cuckoo Hashing
Range Tree
Min Cut/Max Flow
Karger&amp;rsquo;s algorithm: 找最小割, 找多次取最优, 随机地找两个节点合并, 直到只剩下两个节点
Ford-Fulkerson algorithm: 最早的最大流算法, 重复地找增广路径, 直到找不到
Edmonds-Karp algorithm: 用BFS找增广路径, complexity更低
Hall&amp;rsquo;s theorem: 一个二分图存在完美匹配当且仅当对于每一个子集, 子集的大小大于等于子集的邻居的大小
Vocabs conservation node: 保守节点, a node that has the same flow in and out
residual graph: 残余图, a graph that represents the remaining capacity of each edge</description>
    </item>
  </channel>
</rss>
